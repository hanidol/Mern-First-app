{"ast":null,"code":"import { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT, UPDATE, LIKEPAPER, DELETEPAPER, FETCH_ALL } from \"../actions/types\";\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nconst postReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case FETCH_ALL:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n    case UPDATE:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    case DELETEPAPER:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map(post => post._id === payload.id ? {\n          ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n    case LIKEPAPER:\n      return {\n        ...state,\n        posts: state.posts.map(post => post._id === payload.id ? {\n          ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n    default:\n      return state;\n  }\n};\nexport default postReducer;","map":{"version":3,"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","UPDATE","LIKEPAPER","DELETEPAPER","FETCH_ALL","initialState","posts","post","loading","error","postReducer","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"sources":["/Users/haninasri/Desktop/FulStuck/First-App/client/src/reducers/post.js"],"sourcesContent":["import {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n  UPDATE,\n  LIKEPAPER,\n  DELETEPAPER,\n  FETCH_ALL,\n} from \"../actions/types\";\n\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {},\n};\n\nconst postReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false,\n      };\n    case FETCH_ALL:\n      return {\n        ...state,\n        posts: payload,\n        loading: false,\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false,\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false,\n      };\n    case UPDATE:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false,\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== payload),\n        loading: false,\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n    case DELETEPAPER:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== payload),\n        loading: false,\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === payload.id ? { ...post, likes: payload.likes } : post\n        ),\n        loading: false,\n      };\n    case LIKEPAPER:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === payload.id ? { ...post, likes: payload.likes } : post\n        ),\n        loading: false,\n      };\n\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: { ...state.post, comments: payload },\n        loading: false,\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(\n            (comment) => comment._id !== payload\n          ),\n        },\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default postReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}