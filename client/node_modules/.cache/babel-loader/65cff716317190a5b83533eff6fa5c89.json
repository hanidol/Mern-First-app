{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/haninasri/Desktop/FulStuck/First-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"/Users/haninasri/Desktop/FulStuck/First-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _possibleConstructorReturn = require(\"/Users/haninasri/Desktop/FulStuck/First-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/haninasri/Desktop/FulStuck/First-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/haninasri/Desktop/FulStuck/First-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/Users/haninasri/Desktop/FulStuck/First-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nvar _toConsumableArray = require(\"/Users/haninasri/Desktop/FulStuck/First-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar Hoek = require('@hapi/hoek');\nvar Any = require('./types/any');\nvar Cast = require('./cast');\nvar Errors = require('./errors');\nvar Lazy = require('./types/lazy');\nvar Ref = require('./ref');\nvar internals = {\n  alternatives: require('./types/alternatives'),\n  array: require('./types/array'),\n  boolean: require('./types/boolean'),\n  binary: require('./types/binary'),\n  date: require('./types/date'),\n  func: require('./types/func'),\n  number: require('./types/number'),\n  object: require('./types/object'),\n  string: require('./types/string'),\n  symbol: require('./types/symbol')\n};\ninternals.callWithDefaults = function (schema, args) {\n  var _schema;\n  Hoek.assert(this, 'Must be invoked on a Joi instance.');\n  if (this._defaults) {\n    schema = this._defaults(schema);\n  }\n  schema._currentJoi = this;\n  return (_schema = schema)._init.apply(_schema, _toConsumableArray(args));\n};\ninternals.root = function () {\n  var any = new Any();\n  var root = any.clone();\n  Any.prototype._currentJoi = root;\n  root._currentJoi = root;\n  root._binds = new Set(['any', 'alternatives', 'alt', 'array', 'bool', 'boolean', 'binary', 'date', 'func', 'number', 'object', 'string', 'symbol', 'validate', 'describe', 'compile', 'assert', 'attempt', 'lazy', 'defaults', 'extend', 'allow', 'valid', 'only', 'equal', 'invalid', 'disallow', 'not', 'required', 'exist', 'optional', 'forbidden', 'strip', 'when', 'empty', 'default']);\n  root.any = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    Hoek.assert(args.length === 0, 'Joi.any() does not allow arguments.');\n    return internals.callWithDefaults.call(this, any, args);\n  };\n  root.alternatives = root.alt = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return internals.callWithDefaults.call(this, internals.alternatives, args);\n  };\n  root.array = function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    Hoek.assert(args.length === 0, 'Joi.array() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.array, args);\n  };\n  root.boolean = root.bool = function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    Hoek.assert(args.length === 0, 'Joi.boolean() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.boolean, args);\n  };\n  root.binary = function () {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    Hoek.assert(args.length === 0, 'Joi.binary() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.binary, args);\n  };\n  root.date = function () {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    Hoek.assert(args.length === 0, 'Joi.date() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.date, args);\n  };\n  root.func = function () {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    Hoek.assert(args.length === 0, 'Joi.func() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.func, args);\n  };\n  root.number = function () {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    Hoek.assert(args.length === 0, 'Joi.number() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.number, args);\n  };\n  root.object = function () {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    return internals.callWithDefaults.call(this, internals.object, args);\n  };\n  root.string = function () {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    Hoek.assert(args.length === 0, 'Joi.string() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.string, args);\n  };\n  root.symbol = function () {\n    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      args[_key11] = arguments[_key11];\n    }\n    Hoek.assert(args.length === 0, 'Joi.symbol() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.symbol, args);\n  };\n  root.ref = function () {\n    return Ref.create.apply(Ref, arguments);\n  };\n  root.isRef = function (ref) {\n    return Ref.isRef(ref);\n  };\n  root.validate = function (value) {\n    var _ref;\n    var last = (_ref = (arguments.length <= 1 ? 0 : arguments.length - 1) - 1 + 1, _ref < 1 || arguments.length <= _ref ? undefined : arguments[_ref]);\n    var callback = typeof last === 'function' ? last : null;\n    var count = (arguments.length <= 1 ? 0 : arguments.length - 1) - (callback ? 1 : 0);\n    if (count === 0) {\n      return any.validate(value, callback);\n    }\n    var options = count === 2 ? arguments.length <= 2 ? undefined : arguments[2] : undefined;\n    var schema = this.compile(arguments.length <= 1 ? undefined : arguments[1]);\n    return schema._validateWithOptions(value, options, callback);\n  };\n  root.describe = function () {\n    var schema = arguments.length ? this.compile(arguments.length <= 0 ? undefined : arguments[0]) : any;\n    return schema.describe();\n  };\n  root.compile = function (schema) {\n    try {\n      return Cast.schema(this, schema);\n    } catch (err) {\n      if (err.hasOwnProperty('path')) {\n        err.message = err.message + '(' + err.path + ')';\n      }\n      throw err;\n    }\n  };\n  root.assert = function (value, schema, message) {\n    this.attempt(value, schema, message);\n  };\n  root.attempt = function (value, schema, message) {\n    var result = this.validate(value, schema);\n    var error = result.error;\n    if (error) {\n      if (!message) {\n        if (typeof error.annotate === 'function') {\n          error.message = error.annotate();\n        }\n        throw error;\n      }\n      if (!(message instanceof Error)) {\n        if (typeof error.annotate === 'function') {\n          error.message = \"\".concat(message, \" \").concat(error.annotate());\n        }\n        throw error;\n      }\n      throw message;\n    }\n    return result.value;\n  };\n  root.reach = function (schema, path) {\n    Hoek.assert(schema && schema instanceof Any, 'you must provide a joi schema');\n    Hoek.assert(Array.isArray(path) || typeof path === 'string', 'path must be a string or an array of strings');\n    var reach = function reach(sourceSchema, schemaPath) {\n      if (!schemaPath.length) {\n        return sourceSchema;\n      }\n      var children = sourceSchema._inner.children;\n      if (!children) {\n        return;\n      }\n      var key = schemaPath.shift();\n      for (var i = 0; i < children.length; ++i) {\n        var child = children[i];\n        if (child.key === key) {\n          return reach(child.schema, schemaPath);\n        }\n      }\n    };\n    var schemaPath = typeof path === 'string' ? path ? path.split('.') : [] : path.slice();\n    return reach(schema, schemaPath);\n  };\n  root.lazy = function () {\n    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      args[_key12] = arguments[_key12];\n    }\n    return internals.callWithDefaults.call(this, Lazy, args);\n  };\n  root.defaults = function (fn) {\n    var _this = this;\n    Hoek.assert(typeof fn === 'function', 'Defaults must be a function');\n    var joi = Object.create(this.any());\n    joi = fn(joi);\n    Hoek.assert(joi && joi instanceof this.constructor, 'defaults() must return a schema');\n    Object.assign(joi, this, joi.clone()); // Re-add the types from `this` but also keep the settings from joi's potential new defaults\n\n    joi._defaults = function (schema) {\n      if (_this._defaults) {\n        schema = _this._defaults(schema);\n        Hoek.assert(schema instanceof _this.constructor, 'defaults() must return a schema');\n      }\n      schema = fn(schema);\n      Hoek.assert(schema instanceof _this.constructor, 'defaults() must return a schema');\n      return schema;\n    };\n    return joi;\n  };\n  root.bind = function () {\n    var joi = Object.create(this);\n    joi._binds.forEach(function (bind) {\n      joi[bind] = joi[bind].bind(joi);\n    });\n    return joi;\n  };\n  root.extend = function () {\n    var _this2 = this;\n    for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n      args[_key13] = arguments[_key13];\n    }\n    var extensions = Hoek.flatten(args);\n    Hoek.assert(extensions.length > 0, 'You need to provide at least one extension');\n    this.assert(extensions, root.extensionsSchema);\n    var joi = Object.create(this.any());\n    Object.assign(joi, this);\n    joi._currentJoi = joi;\n    joi._binds = new Set(joi._binds);\n    var _loop = function _loop(i) {\n      var extension = extensions[i];\n      if (typeof extension === 'function') {\n        extension = extension(joi);\n      }\n      _this2.assert(extension, root.extensionSchema);\n      var base = (extension.base || _this2.any()).clone(); // Cloning because we're going to override language afterwards\n      var ctor = base.constructor;\n      var type = /*#__PURE__*/function (_ctor) {\n        _inherits(type, _ctor);\n        // eslint-disable-line no-loop-func\n\n        function type() {\n          var _this3;\n          _classCallCheck(this, type);\n          _this3 = _possibleConstructorReturn(this, _getPrototypeOf(type).call(this));\n          if (extension.base) {\n            Object.assign(_assertThisInitialized(_assertThisInitialized(_this3)), base);\n          }\n          _this3._type = extension.name;\n          return _this3;\n        }\n        return type;\n      }(ctor);\n      if (extension.language) {\n        var lang = _defineProperty({}, extension.name, extension.language);\n        type.prototype._language = Hoek.applyToDefaults(type.prototype._language || base._settings && base._settings.language || {}, lang);\n      }\n      if (extension.coerce) {\n        type.prototype._coerce = function (value, state, options) {\n          if (ctor.prototype._coerce) {\n            var baseRet = ctor.prototype._coerce.call(this, value, state, options);\n            if (baseRet.errors) {\n              return baseRet;\n            }\n            value = baseRet.value;\n          }\n          var ret = extension.coerce.call(this, value, state, options);\n          if (ret instanceof Errors.Err) {\n            return {\n              value: value,\n              errors: ret\n            };\n          }\n          return {\n            value: ret\n          };\n        };\n      }\n      if (extension.pre) {\n        type.prototype._base = function (value, state, options) {\n          if (ctor.prototype._base) {\n            var baseRet = ctor.prototype._base.call(this, value, state, options);\n            if (baseRet.errors) {\n              return baseRet;\n            }\n            value = baseRet.value;\n          }\n          var ret = extension.pre.call(this, value, state, options);\n          if (ret instanceof Errors.Err) {\n            return {\n              value: value,\n              errors: ret\n            };\n          }\n          return {\n            value: ret\n          };\n        };\n      }\n      if (extension.rules) {\n        var _loop2 = function _loop2(j) {\n          var rule = extension.rules[j];\n          var ruleArgs = rule.params ? rule.params instanceof Any ? rule.params._inner.children.map(function (k) {\n            return k.key;\n          }) : Object.keys(rule.params) : [];\n          var validateArgs = rule.params ? Cast.schema(_this2, rule.params) : null;\n          type.prototype[rule.name] = function () {\n            for (var _len14 = arguments.length, rArgs = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n              rArgs[_key14] = arguments[_key14];\n            }\n            // eslint-disable-line no-loop-func\n\n            if (rArgs.length > ruleArgs.length) {\n              throw new Error('Unexpected number of arguments');\n            }\n            var hasRef = false;\n            var arg = {};\n            for (var k = 0; k < ruleArgs.length; ++k) {\n              arg[ruleArgs[k]] = rArgs[k];\n              if (!hasRef && Ref.isRef(rArgs[k])) {\n                hasRef = true;\n              }\n            }\n            if (validateArgs) {\n              arg = joi.attempt(arg, validateArgs);\n            }\n            var schema;\n            if (rule.validate && !rule.setup) {\n              var validate = function validate(value, state, options) {\n                return rule.validate.call(this, arg, value, state, options);\n              };\n              schema = this._test(rule.name, arg, validate, {\n                description: rule.description,\n                hasRef: hasRef\n              });\n            } else {\n              schema = this.clone();\n            }\n            if (rule.setup) {\n              var newSchema = rule.setup.call(schema, arg);\n              if (newSchema !== undefined) {\n                Hoek.assert(newSchema instanceof Any, \"Setup of extension Joi.\".concat(this._type, \"().\").concat(rule.name, \"() must return undefined or a Joi object\"));\n                schema = newSchema;\n              }\n              if (rule.validate) {\n                var _validate = function _validate(value, state, options) {\n                  return rule.validate.call(this, arg, value, state, options);\n                };\n                schema = schema._test(rule.name, arg, _validate, {\n                  description: rule.description,\n                  hasRef: hasRef\n                });\n              }\n            }\n            return schema;\n          };\n        };\n        for (var j = 0; j < extension.rules.length; ++j) {\n          _loop2(j);\n        }\n      }\n      if (extension.describe) {\n        type.prototype.describe = function () {\n          var description = ctor.prototype.describe.call(this);\n          return extension.describe.call(this, description);\n        };\n      }\n      var instance = new type();\n      joi[extension.name] = function () {\n        for (var _len15 = arguments.length, extArgs = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n          extArgs[_key15] = arguments[_key15];\n        }\n        return internals.callWithDefaults.call(this, instance, extArgs);\n      };\n      joi._binds.add(extension.name);\n    };\n    for (var i = 0; i < extensions.length; ++i) {\n      _loop(i);\n    }\n    return joi;\n  };\n  root.extensionSchema = internals.object.keys({\n    base: internals.object.type(Any, 'Joi object'),\n    name: internals.string.required(),\n    coerce: internals.func.arity(3),\n    pre: internals.func.arity(3),\n    language: internals.object,\n    describe: internals.func.arity(1),\n    rules: internals.array.items(internals.object.keys({\n      name: internals.string.required(),\n      setup: internals.func.arity(1),\n      validate: internals.func.arity(4),\n      params: [internals.object.pattern(/.*/, internals.object.type(Any, 'Joi object')), internals.object.type(internals.object.constructor, 'Joi object')],\n      description: [internals.string, internals.func.arity(1)]\n    }).or('setup', 'validate'))\n  }).strict();\n  root.extensionsSchema = internals.array.items([internals.object, internals.func.arity(1)]).strict();\n  root.version = require('../package.json').version;\n  return root;\n};\nmodule.exports = internals.root();","map":null,"metadata":{},"sourceType":"script"}