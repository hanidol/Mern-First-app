{"ast":null,"code":"'use strict';\n\nvar Assert = require('./assert');\nvar Clone = require('./clone');\nvar Merge = require('./merge');\nvar Utils = require('./utils');\nvar internals = {};\nmodule.exports = function (defaults, source) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');\n  Assert(!source || source === true || typeof source === 'object', 'Invalid source value: must be true, falsy or an object');\n  Assert(typeof options === 'object', 'Invalid options: must be an object');\n  if (!source) {\n    // If no source, return null\n    return null;\n  }\n  if (options.shallow) {\n    return internals.applyToDefaultsWithShallow(defaults, source, options);\n  }\n  var copy = Clone(defaults);\n  if (source === true) {\n    // If source is set to true, use defaults\n    return copy;\n  }\n  var nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n  return Merge(copy, source, {\n    nullOverride: nullOverride,\n    mergeArrays: false\n  });\n};\ninternals.applyToDefaultsWithShallow = function (defaults, source, options) {\n  var keys = options.shallow;\n  Assert(Array.isArray(keys), 'Invalid keys');\n  options = Object.assign({}, options);\n  options.shallow = false;\n  var copy = Clone(defaults, {\n    shallow: keys\n  });\n  if (source === true) {\n    // If source is set to true, use defaults\n    return copy;\n  }\n  var storage = Utils.store(source, keys); // Move shallow copy items to storage\n  Merge(copy, source, {\n    mergeArrays: false,\n    nullOverride: false\n  }); // Deep copy the rest\n  Utils.restore(copy, source, storage); // Shallow copy the stored items and restore\n  return copy;\n};","map":null,"metadata":{},"sourceType":"script"}